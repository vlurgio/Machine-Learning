dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = dataset$Salary ~ .,
data = dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = dataset$Salary ~ .,
data = dataset)
# Visualising polynomial regression results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff') +
xlab('Level') +
ylab('Salary')
# Visualising linear regression results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff') +
xlab('Level') +
ylab('Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level = 6.5))
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# No splitting necessary as dataset is too small
# Fitting linear Regression to dataset
lin_reg = lm(formula = dataset$Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = dataset$Salary ~ .,
data = dataset)
# Visualising linear regression results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff') +
xlab('Level') +
ylab('Salary')
# Visualising polynomial regression results
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff') +
xlab('Level') +
ylab('Salary')
y_pred = predict(poly_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
install.packages(e1071)
install.packages('e1071')
library("e1071", lib.loc="~/R/win-library/3.4")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting the Regression Model to the dataset
regressor = svm(formula = dataset$Salary ~ .,
data = dataset,
type = 'eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
setwd("C:/Users/13vlu/git/Machine-Learning/Machine_Learning_A-Z_Template_Folder/Part 2 - Regression/Section 8 - Decision Tree Regression")
install.packages('rpart')
library("rpart", lib.loc="~/R/win-library/3.4")
library(rpart)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting the Decission Tree to the dataset
library(rpart)
regressor = rpart(formula = dataset$Salary ~ .,
data = dataset)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Treeresults
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree)') +
xlab('Level') +
ylab('Salary')
# Fitting the Decission Tree to the dataset
library(rpart)
regressor = rpart(formula = dataset$Salary ~ .,
data = dataset,
minsplit = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Treeresults
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree)') +
xlab('Level') +
ylab('Salary')
# Fitting the Decission Tree to the dataset
library(rpart)
regressor = rpart(formula = dataset$Salary ~ .,
data = dataset,
minsplit = 1)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Treeresults
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree)') +
xlab('Level') +
ylab('Salary')
library(rpart)
regressor = rpart(formula = dataset$Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Treeresults
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree)') +
xlab('Level') +
ylab('Salary')
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
setwd("C:/Users/13vlu/git/Machine-Learning/Machine_Learning_A-Z_Template_Folder/Part 2 - Regression/Section 9 - Random Forest Regression")
install.packages("randomForest")
library(randomForest)
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
library(randomForest)
set.seed(123)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 300)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
