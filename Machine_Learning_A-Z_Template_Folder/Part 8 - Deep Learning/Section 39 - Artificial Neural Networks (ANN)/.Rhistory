library(h2o)
h2o.init(nthreads = -1)
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(2, 1)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
dataset = read.csv('Churn_Modelling.csv')
setwd("C:/Users/13vlu/git/Machine-Learning/Machine_Learning_A-Z_Template_Folder/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(2, 1)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
classifer = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = predict(classifier, newdata = test_set[-3])
View(classifer)
prob_pred = predict(classifer, type = 'response', newdata = test_set[-3])
prob_pred = predict(classifer, type = 'response', newdata = test_set[-3])
classifer = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = predict(classifer, type = 'response', newdata = test_set[-3])
prob_pred = predict(classifer, type = 'response', newdata = as.h2o(test_set[-3]))
View(test_set)
prob_pred = h2o.predict(classifer, newdata = as.h2o(test_set[-11]))
View(prob_pred)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
View(y_pred)
cm = table(test_set[, 3], y_pred)
cm = table(test_set[, 11], y_pred)
cm = table(test_set[-11], y_pred)
summary(prob_pred)
summary(y_pred)
y_pred
y_pred = as.vector(y_pred)
cm = table(test_set[-11], y_pred)
cm = table(test_set[, 11], y_pred)
cm
(63+214)/(2000)
1-0.1385
